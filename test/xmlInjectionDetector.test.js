const fs = require('fs');
const axios = require('axios');
const { detectXMLInjectionVulnerabilities } = require('../modules/xmlInjectionDetector');

// Mock de fs pour éviter d'écrire réellement dans un fichier
jest.mock('fs', () => ({
  appendFileSync: jest.fn(),
}));

// Mock de axios pour simuler des requêtes HTTP
jest.mock('axios');

describe('XML Injection Detector', () => {
  const targetUrl = 'http://localhost:3000/xml';
  const payload = `
  <!DOCTYPE foo [  
    <!ELEMENT foo ANY >
    <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
  <foo>&xxe;</foo>
  `;
  const outputFilePath = 'security_report.txt';

  afterEach(() => {
    jest.clearAllMocks(); // Réinitialise les mocks après chaque test
  });

  it('should detect XML injection vulnerabilities when parsing fails', async () => {
    // Simule une réponse XML invalide
    axios.post.mockResolvedValue({
      data: '<invalid>xml</invalid>',
    });

    await detectXMLInjectionVulnerabilities(targetUrl, payload, outputFilePath);

    // Vérifie que fs.appendFileSync a été appelé avec le bon message
    expect(fs.appendFileSync).toHaveBeenCalledWith(
      outputFilePath,
      expect.stringContaining('Tentative d\'injection XML détectée')
    );
  });

  it('should not detect XML injection vulnerabilities when parsing succeeds', async () => {
    // Simule une réponse XML valide
    axios.post.mockResolvedValue({
      data: '<response>OK</response>',
    });

    await detectXMLInjectionVulnerabilities(targetUrl, payload, outputFilePath);

    // Vérifie que fs.appendFileSync n'a pas été appelé
    expect(fs.appendFileSync).not.toHaveBeenCalled();
  });

  it('should handle errors during the detection process', async () => {
    // Simule une erreur lors de la requête HTTP
    axios.post.mockRejectedValue(new Error('Network Error'));

    await detectXMLInjectionVulnerabilities(targetUrl, payload, outputFilePath);

    // Vérifie que fs.appendFileSync a été appelé avec le message d'erreur
    expect(fs.appendFileSync).toHaveBeenCalledWith(
      outputFilePath,
      expect.stringContaining('Erreur lors de la détection des vulnérabilités d\'injection XML')
    );
  });
});const fs = require('fs');
const axios = require('axios');
const { detectXMLInjectionVulnerabilities } = require('./xmlInjectionDetector');

// Mock de fs pour éviter d'écrire réellement dans un fichier
jest.mock('fs', () => ({
  appendFileSync: jest.fn(),
}));

// Mock de axios pour simuler des requêtes HTTP
jest.mock('axios');

describe('XML Injection Detector', () => {
  const targetUrl = 'http://localhost:3000/xml';
  const payload = `
  <!DOCTYPE foo [  
    <!ELEMENT foo ANY >
    <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
  <foo>&xxe;</foo>
  `;
  const outputFilePath = 'security_report.txt';

  afterEach(() => {
    jest.clearAllMocks(); // Réinitialise les mocks après chaque test
  });

  it('should detect XML injection vulnerabilities when parsing fails', async () => {
    // Simule une réponse XML invalide
    axios.post.mockResolvedValue({
      data: '<invalid>xml</invalid>',
    });

    await detectXMLInjectionVulnerabilities(targetUrl, payload, outputFilePath);

    // Vérifie que fs.appendFileSync a été appelé avec le bon message
    expect(fs.appendFileSync).toHaveBeenCalledWith(
      outputFilePath,
      expect.stringContaining('Tentative d\'injection XML détectée')
    );
  });

  it('should not detect XML injection vulnerabilities when parsing succeeds', async () => {
    // Simule une réponse XML valide
    axios.post.mockResolvedValue({
      data: '<response>OK</response>',
    });

    await detectXMLInjectionVulnerabilities(targetUrl, payload, outputFilePath);

    // Vérifie que fs.appendFileSync n'a pas été appelé
    expect(fs.appendFileSync).not.toHaveBeenCalled();
  });

  it('should handle errors during the detection process', async () => {
    // Simule une erreur lors de la requête HTTP
    axios.post.mockRejectedValue(new Error('Network Error'));

    await detectXMLInjectionVulnerabilities(targetUrl, payload, outputFilePath);

    // Vérifie que fs.appendFileSync a été appelé avec le message d'erreur
    expect(fs.appendFileSync).toHaveBeenCalledWith(
      outputFilePath,
      expect.stringContaining('Erreur lors de la détection des vulnérabilités d\'injection XML')
    );
  });
});