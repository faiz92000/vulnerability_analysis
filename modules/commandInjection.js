const axios = require('axios');
const fs = require('fs');
const { exec } = require('child_process');

// Fonction pour analyser l'URL à la recherche d'injections de commande
async function scanForCommandInjection(url, outputFilePath) {
  try {
    // Effectuez une première requête GET pour récupérer le contenu de la page
    const response = await axios.get(url);
    const html = response.data;

    // Recherchez des vulnérabilités d'injection de commande potentielles
    const commandsToTest = ["; ls", "| cat /etc/passwd", "& echo 'vulnérable'"];
    let vulnDetected = false;

    for (const cmd of commandsToTest) {
      if (html.includes(`Command injection detected: ${cmd}`)) {
        console.log(`Vulnérabilité d'injection de commande détectée : ${url}`);
        // Enregistrez la vulnérabilité dans le rapport
        const report = `Vulnérabilité d'injection de commande détectée sur ${url}\n`;
        fs.appendFileSync(outputFilePath, report);
        vulnDetected = true;
        break; // Sortez de la boucle dès que vous en avez trouvé une
      }
    }

    if (!vulnDetected) {
      console.log('Aucune vulnérabilité d\'injection de commande détectée :', url);
    }
  } catch (error) {
    console.error('Erreur lors de la récupération de la page', url, ':', error);
    // Enregistrez l'erreur dans le rapport
    const report = `Erreur lors de la récupération de la page ${url}: ${error}\n`;
    fs.appendFileSync(outputFilePath, report);
  }
}

module.exports = {
  scanForCommandInjection,
};
