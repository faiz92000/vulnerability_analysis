const axios = require('axios');
const fs = require('fs');
const url = require('url');

// Fonction pour détecter les vulnérabilités d'inclusion de fichiers
async function detectFileInclusionVulnerabilities(targetUrl, outputFilePath) {
  try {
    // Analyser l'URL de la cible
    const parsedUrl = new URL(targetUrl);

    // Liste des répertoires et fichiers sensibles
    const sensitivePaths = ['/etc/passwd', '/proc/self/environ', '/var/www/html/secret.txt'];
    const vulnerableEndpoints = [];

    for (const sensitivePath of sensitivePaths) {
      const testUrl = url.resolve(targetUrl, sensitivePath);
      const response = await axios.get(testUrl);

      if (response.status === 200) {
        vulnerableEndpoints.push(testUrl);
      }
    }

    if (vulnerableEndpoints.length > 0) {
      console.log('Vulnérabilités d\'inclusion de fichiers détectées :', targetUrl);
      const report = 'Vulnérabilités d\'inclusion de fichiers détectées :\n';
      vulnerableEndpoints.forEach((endpoint) => {
        console.log(endpoint);
        report += `${endpoint}\n`;
      });

      fs.appendFileSync(outputFilePath, report);
    } else {
      console.log('Aucune vulnérabilité d\'inclusion de fichiers détectée :', targetUrl);
    }
  } catch (error) {
    console.error('Erreur lors de la détection des vulnérabilités d\'inclusion de fichiers :', error);
    const report = `Erreur lors de la détection des vulnérabilités d\'inclusion de fichiers : ${error}\n`;
    fs.appendFileSync(outputFilePath, report);
  }
}

module.exports = {
  detectFileInclusionVulnerabilities,
};
