const axios = require('axios');
const fs = require('fs');
const url = require('url');
const { JSDOM } = require('jsdom');

// Fonction pour détecter les vulnérabilités CSRF
async function detectCSRFVulnerabilities(targetUrl, outputFilePath) {
  try {
    // Récupérer le contenu de la page cible
    const response = await axios.get(targetUrl);
    const html = response.data;

    // Analyser le HTML avec JSDOM
    const { window } = new JSDOM(html);
    const { document } = window;

    // Rechercher les formulaires sur la page
    const forms = document.querySelectorAll('form');

    const csrfVulnerabilities = [];

    // Analyser chaque formulaire
    forms.forEach((form, index) => {
      // Vérifier si le formulaire a un champ CSRF token
      const csrfTokenField = form.querySelector('input[name="csrfToken"]');

      if (!csrfTokenField) {
        // Le formulaire ne contient pas de champ CSRF token
        csrfVulnerabilities.push(`Possible vulnérabilité CSRF dans le formulaire #${index + 1}`);
      }
    });

    if (csrfVulnerabilities.length > 0) {
      console.log('Vulnérabilités CSRF détectées :', targetUrl);
      const report = 'Vulnérabilités CSRF détectées :\n';
      csrfVulnerabilities.forEach((vuln) => {
        console.log(vuln);
        report += vuln + '\n';
      });

      fs.appendFileSync(outputFilePath, report);
    } else {
      console.log('Aucune vulnérabilité CSRF détectée :', targetUrl);
    }
  } catch (error) {
    console.error('Erreur lors de la détection des vulnérabilités CSRF :', error);
    const report = `Erreur lors de la détection des vulnérabilités CSRF : ${error}\n`;
    fs.appendFileSync(outputFilePath, report);
  }
}

module.exports = {
  detectCSRFVulnerabilities,
};
