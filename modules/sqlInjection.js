const axios = require('axios');
const fs = require('fs');
const { URL } = require('url');

// Fonction pour analyser l'URL à la recherche d'injections SQL
async function scanForSQLInjection(url, outputFilePath) {
  try {
    // Effectuez une première requête GET pour récupérer le contenu de la page
    const response = await axios.get(url);
    const html = response.data;

    // Définissez ici les patterns typiques d'injection SQL à rechercher
    const sqlPatterns = ["' OR 1=1 --", '" OR "x"="x'];

    const vulnerabilities = [];

    // Recherchez chaque pattern dans le contenu de la page
    for (const pattern of sqlPatterns) {
      if (html.includes(pattern)) {
        vulnerabilities.push(`Possible injection SQL détectée : ${pattern}`);
      }
    }

    // Si des vulnérabilités ont été détectées, enregistrez-les dans le rapport
    if (vulnerabilities.length > 0) {
      console.log('Vulnérabilités d\'injection SQL détectées :', url);
      const report = `Vulnérabilités d'injection SQL détectées sur ${url}:\n`;
      report += vulnerabilities.map(vuln => ` - ${vuln}`).join('\n');
      fs.appendFileSync(outputFilePath, report + '\n');
    } else {
      console.log('Aucune vulnérabilité d\'injection SQL détectée :', url);
    }
  } catch (error) {
    console.error('Erreur lors de la récupération de la page', url, ':', error);
    // Enregistrez l'erreur dans le rapport
    const report = `Erreur lors de la récupération de la page ${url}: ${error}\n`;
    fs.appendFileSync(outputFilePath, report);
  }
}

module.exports = {
  scanForSQLInjection,
};
