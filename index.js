const commander = require('commander');
const fs = require('fs');
const path = require('path');
const axios = require('axios');
const apiSecurityChecker = require('./modules/apiSecurityChecker');
const corsSecurityAnalyzer = require('./modules/corsSecurityAnalyzer');
const cookieSecurityChecker = require('./modules/cookieSecurityChecker');
const ldapInjectionVulnerabilityDetector = require('./modules/ldapInjectionVulnerabilityDetector');
const xmlInjectionDetector = require('./modules/xmlInjectionDetector');
const xssVulnerabilityScanner = require('./modules/xssVulnerabilityScanner');

// Importez vos modules de détection de vulnérabilités
const sqlInjectionModule = require('./modules/sqlInjection');
const commandInjectionModule = require('./modules/commandInjection');
const CSRFScannerModule = require('./modules/csrfScanner');
const fileInclusionScannerModule = require('./modules/fileInclusionScanner');


// Fonction pour analyser les arguments en ligne de commande
function parseCommandLineArguments() {
  commander
    .version('1.0.0')
    .option('-u, --url <url>', 'URL de l\'application à analyser')
    .option('-o, --output <output>', 'Chemin du fichier de rapport')
    .parse(process.argv);
}

// Fonction principale pour coordonner l'analyse de vulnérabilités
async function runVulnerabilityScanner() {
  // Analysez les arguments en ligne de commande
  parseCommandLineArguments();

  // Vérifiez si l'URL et le chemin de rapport sont spécifiés
  if (!commander.url || !commander.output) {
    console.error('Veuillez spécifier une URL et un chemin de rapport.');
    process.exit(1);
  }

  const url = commander.url;
  const outputFilePath = path.resolve(commander.output);
  let vulnerabilities = [];

  try {
    // Module d'injection SQL
    const sqlVulnerabilities = await sqlInjectionModule.scanForSQLInjection(url);
    vulnerabilities = vulnerabilities.concat(sqlVulnerabilities);

    // Module d'injection de commande
    const commandVulnerabilities = await commandInjectionModule.scanForCommandInjection(url);
    vulnerabilities = vulnerabilities.concat(commandVulnerabilities);

    // Ajoutez d'autres modules de détection au besoin

    // Générez un rapport
    generateReport(outputFilePath, vulnerabilities);
  } catch (error) {
    console.error('Une erreur s\'est produite lors de l\'analyse de vulnérabilités :', error);
    // Enregistrez l'erreur dans le rapport
    const report = `Erreur lors de l'analyse de vulnérabilités : ${error}\n`;
    fs.appendFileSync(outputFilePath, report);
  }
}

// Fonction pour générer un rapport
function generateReport(outputFilePath, vulnerabilities) {
  // Créez un rapport basé sur les vulnérabilités détectées
  let report = 'Rapport d\'analyse de vulnérabilités :\n';
  for (const vuln of vulnerabilities) {
    report += `- ${vuln}\n`;
  }

  // Enregistrez le rapport dans un fichier
  fs.writeFileSync(outputFilePath, report);

  console.log('Analyse de vulnérabilités terminée. Rapport généré à :', outputFilePath);
}

// Exécutez l'outil d'analyse de vulnérabilités
runVulnerabilityScanner();
